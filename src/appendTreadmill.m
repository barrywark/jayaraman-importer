function epoch = appendTreadmill(epoch,...
                               treadmillFile,...
                               yamlFile)
                                      
    % Add Stimuli and Response information contained in a tif file, to a given Epoch. Return the updated Epoch. 
    %
    %    epoch = appendTreadmill(epoch, treadmillFile, yamlFile)
    %                                 
    %      epoch: ovation.Epoch object. The Epoch to attach the Response
    %      to.
    %
    %      treadmillFile: path to the generated .TXT file containing the
    %      Response data
    %
    %      yamlFile: path to the user-defined yamlfile. This file contains
    %      a camera name and manufacturer for each camera used to generate
    %      this .TXT file.
    
    % Copyright (c) 2012 Physion Consulting LLC
        
    import ovation.*;

    [~,~,deltaX0,...
        deltaY0,...
        deltaX1,...
        deltaY1,...
        surfaceQuality0,...
        surfaceQuality1,...
        highShutterSpeed0,...
        lowShutterSpeed0,...
        highShutterSpeed1,...
        lowShutterSpeed1] = textread(treadmillFile);
    
    
    
    %TODO: get camera number and deriation_parameters from yaml file?
    camera1 = epoch.getEpochGroup().getExperiment().externalDevice('camera1', 'manufacturer');
    camera2 = epoch.getEpochGroup().getExperiment().externalDevice('camera2', 'manufacturer');
    device_params = struct();
    device_params.zero_centered = 128;

    shutterSpeed0 = arrayfun(@(high, low) uint16(low) + high*(2^8), highShutterSpeed0, lowShutterSpeed0);
    shutterSpeed1 = arrayfun(@(high, low) uint16(low) + high*(2^8), highShutterSpeed1, lowShutterSpeed1);
    
    shape = [size(deltaX0, 1), 2]; % all columns should have the same height
    units = 'pixels'; % microns?
    samplingRate = [1, median(shutterSpeed0)];
    samplingRateUnits = {'N/A', 'clock cycles/frame'};
    dimensionLabels = {'delta-XY', 'time'};
    epoch.insertResponse(camera1,...
            struct2map(device_params),...
            NumericData([0, 0], shape),...
            units,...
            dimensionLabels,...
            samplingRate,...
            samplingRateUnits,...
            'org.hhmi.jayaraman.treadmill'); 
        
    samplingRate = [1, median(shutterSpeed1)];
    dataRetrievalFunction = 'textread';
    epoch.insertResponse(camera2,...
            struct2map(device_params),...
            treadmillFile,...
            shape,...
            dataRetrievalFunction,...
            {treadmillFile},...
            units,...
            dimensionLabels,...
            samplingRate,...
            samplingRateUnits,...
            'org.hhmi.jayaraman.treadmill'); 
end
